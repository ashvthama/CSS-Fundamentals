CSS HANDBOOK

use grid for layouts, and flex for positioning. both are container+items based apply flex/grid on the container.

emit:-
	.container>.box*4{box-$} -> emit shortcut for creating a container and placing 4 div inside it and then adding value dynamically

BOX MODEL :-
	MARGIN- OUTSIDE OF THE  BORDER
	PADDING:- INSIDE OF THE BORDER;
	
SPECIFICITY:-
	#->ID->1;
	.->CLASS->2
	tag->a, div, button etc->3;
	
SHADOW:-
	text SHADOW-> shadow on content 
	box SHADOW-> shadow on elements like div, a, img etc:-
			Spread radius:-


DIMENSION PROPERTIES:-
	in dimensions the combination will be: width x height
	Min height:- if contents height less than min height than it will remain same, but if
				content grows greater than min height, block will automatically grow.
	Min width:-
	Max height:-if content is bigger than max height it will overflow;
	Max width:-

OVERFLOW PROPERTY:
	overflow: visible -> the actual overflow will be visible
	overflow: hidden -> hides
	overflow: scroll -> allows us to scroll down;
	overflow: auto 


	overflow-y -> responsible for vertical 
	overflow-x -> responsible for horizontal  


POSITIIONING:-
	STATIC - normal flow, default value set, no need to specify. default value.
	Relative - moves element relative to its normal positioning
				manipulated using top, left, bottom, right 

	fixed - relative to the viewport, means remains in the same position even after scrolled.

	absolute: positioning according to nearest positioned ancestor, parent element which is non static (eg. div with relative positioning)

TRANSFORMATIONS:-
	transform:translate(x, y)- moving an element
		x-> Horizontally moving, y-> vertically moving, transform works only on block element, like section, div

	rotate(angle)- rotating, when the angle is positive moves clockwise, when negative anticlockwise

	scale(x, y)- increases size, zooms in
			scalex()- size horizontally
	 		scaley()- size vertically

--------------------------------------------------------------------------------------------------------------------------------------
FLEX :-

display: flex -> creating flex
default direction -> horizontal(row), can be changed using-> flex-direction:column
the items placed inside of a flex container comes in a single line when flex created (row default )

container properties:- 

direction 
row(default) + row reverse
column + column reverse

flex-wrap:-
when we reduce the window size the width of the items inside of flex-container starts decrease automatically, for avoiding this we can 
use flex wrap
flex-wrap:wrap-> can keep the width of the element to predefined state until a certain step


justify content -> for the horizontal axis (default, row)

align-items -> for the vertical axis(column)
	align-items:baseline -> the items baseline matches to be same, even if their sizes are different.

align-content -> defines how the flex lines are distributed across the vertical axis(row), handling spaces betweeen the rows.


CHILD PROPERTIES :-

order:-
if you increase the order of any element then it will be placed in the last between any child elements. eg. order:1

flex-grow:-
if flex-grow:1 -> all the child itmes inside the flex will take up all the available width, if applied on the common class the all elements
will share the available width, but if applied on the specific class having specific number of items it will only increase its width.

flex shrink:-
The flex-shrink property specifies how the item will shrink relative to the rest of the flexible items inside the same container.
default value:1;
sets the speed of elements to squeeze.	

flex-basis:- 
similar as width in terms of allocating width, but the width of the item increases automatically when content inside of it increases.
making the website reponsive.
	 

------------------------------------------------------------------------------------------------------------------------------------

PARALLAXEFFECT PROJECT :-

PERSPECTIVE-
ENABLES THE 3D VIEW, NOTHING BUT DISTANCE BETWEEN EYES AND THE ACTUAL VIEW PORT.

z-index:- default value 0, for overlapping which element will be on which element is decided by the z-index.

object-cover:-> image will take all the width,

translateZ -> made the image appear far
scale -> increased the size of image even keeping it far, generating the parallax effect.


GRID :-

CONTAINER PROPERTIES
combination of rows and columns
flexbox -> positioning 1d, grid-> 2d ,layout

similar like flexbox, grid has container and child structure.

if set as grid all the elements take up all the  

grid-template-columns-> creates new columns.
grid-template-rows -> creates new rows.

fr-> for creating rows and columns of equal sizes by dividing the width and height equally between suggested elements.
grid-template-columns: 1fr 1fr 1fr; -> creates 3 colums with equal dividing the available width.
grid-template-colums: 1fr 1fr 1fr 100px; -> 3 equal width and one 100px column.


ITEM PROPERTIES ->

grid-column-start :1 
grid-column-end:5 -> takes the columns till 5th. and pushes the other elements in next row, column.
this is for width of element.

for height of element-
grid-row-start:1,
grid-row-end:, 



